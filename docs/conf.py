# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------
import os
import sys

import django
from django.core.management import call_command
from django.utils.translation import activate

sys.path.insert(0, os.path.abspath("../src"))
os.environ["LOG_REQUESTS"] = "false"

import openzaak  # noqa isort:skip
from openzaak.setup import setup_env  # noqa isort:skip

# Import as private variable to avoid errors on build
from importlib.metadata import version as _version

setup_env()
django.setup()

# from openzaak.setup import setup_env  # noqa isort:skip

# TODO: This needs to be enabled when we want to use autodoc to grab
# documentation from classes and functions. However, enabling django.setup()
# causes RTD to fail because GDAL is not present in the RTD environment.
# See: https://github.com/readthedocs/readthedocs-docker-images/issues/114#issuecomment-570566599
#
# setup_env()
# django.setup()

# -- Project information -----------------------------------------------------

project = "Open Zaak"
copyright = "2019 - 2020, Dimpact"
author = openzaak.__author__

# The full version, including alpha/beta/rc tags
release = openzaak.__version__


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.todo",
    "sphinx.ext.extlinks",
    "sphinx.ext.intersphinx",
    "sphinx.ext.graphviz",
    "recommonmark",
    "sphinx_markdown_tables",
    "sphinx_tabs.tabs",
    "sphinx.ext.autodoc",
    "django_setup_configuration.documentation.setup_config_example",
    "django_setup_configuration.documentation.setup_config_usage",
    "uml_directive.uml",
]


# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# Also set the language to English for Django, to make sure that any translatable text
# is also shown in English (for instance the help texts for setup configuration examples)
activate("en")

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

source_suffix = [".rst", ".md"]

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_logo = "logo.svg"
html_theme = "sphinx_rtd_theme"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

todo_include_todos = True

linkcheck_ignore = [
    r"https?://.*\.gemeente.nl",
    r"http://localhost:\d+/",
    r"http://127\.0\.0\.1:\d+/",
    r"https://.*sentry\.openzaak\.nl.*",
]

linkcheck_request_headers = {
    "https://jwt.io": {
        "Accept-Language": "en-US",
    },
}

sphinx_tabs_valid_builders = ["linkcheck"]

extlinks = {
    "open-zaak": ("https://github.com/open-zaak/open-zaak/issues/%s", "#%s"),
    "open-notificaties": (
        "https://github.com/open-zaak/open-notificaties/issues/%s",
        "#%s",
    ),
    "open-klant": ("https://github.com/maykinmedia/open-klant/issues/%s", "#%s"),
    "open-api-framework": (
        "https://github.com/maykinmedia/open-api-framework/issues/%s",
        "#%s",
    ),
}

django_structlog_version = _version("django-structlog")
intersphinx_mapping = {
    "django-structlog": (
        f"https://django-structlog.readthedocs.io/en/{django_structlog_version}",
        None,
    ),
}


#
#   Datamodel image creation
#
graphviz_output_format = "png"


def generate_django_model_graphs(app):
    output_dir = os.path.join(app.srcdir, "_static", "uml")
    os.makedirs(output_dir, exist_ok=True)

    project_root = os.path.abspath(os.path.join(app.srcdir, ".."))
    components_dir = os.path.join(project_root, "src", "openzaak", "components")

    apps_in_components = [
        d
        for d in os.listdir(components_dir)
        if os.path.isdir(os.path.join(components_dir, d))
        and os.path.isfile(os.path.join(components_dir, d, "__init__.py"))
    ]

    # Define grouped apps you want in one diagram
    grouped_apps = {
        "autorisaties": ["autorisaties", "authorizations"],
    }

    for group_name, app_list in grouped_apps.items():
        png_path = os.path.join(output_dir, f"{group_name}.png")
        try:
            call_command(
                "graph_models",
                *app_list,
                output=png_path,
                rankdir="LR",
                hide_edge_labels=True,
            )
        except Exception as exc:
            print(f"Failed to generate PNG for {group_name}: {exc}")

    # Generate separate diagrams for the remaining apps
    excluded_apps = set(app for group in grouped_apps.values() for app in group)
    for comp in apps_in_components:
        if comp in excluded_apps:
            continue

        png_path = os.path.join(output_dir, f"{comp}.png")
        try:
            call_command(
                "graph_models",
                comp,
                output=png_path,
                rankdir="LR",
                hide_edge_labels=True,
            )
        except Exception as exc:
            print(f"Failed to generate PNG for {comp}: {exc}")


def setup(app):
    app.connect("builder-inited", generate_django_model_graphs)
