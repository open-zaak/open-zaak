name: Run CI

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: openzaak/open-zaak
  DJANGO_SETTINGS_MODULE: openzaak.conf.ci
  DB_PASSWORD: ''
  DB_USER: postgres
  ALLOWED_HOSTS: openzaak.nl
  COMPOSE_DOCKER_CLI_BUILD: '1'
  DOCKER_BUILDKIT: '1'

jobs:
  # determine changed files to decide if certain jobs can be skipped or not
  changed-files:
    runs-on: ubuntu-latest  # windows-latest | macos-latest
    name: Determine changed files
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get changed PY files
        id: changed-py-files
        uses: tj-actions/changed-files@v8.5
        with:
          files: |
            ^src/.+\.py

      - name: Get changed JS files
        id: changed-js-files
        uses: tj-actions/changed-files@v8.5
        with:
          files: |
            ^src/.+\.js

      - name: Get changed requirements files
        id: changed-requirements
        uses: tj-actions/changed-files@v8.5
        with:
          files: ^requirements/.+\.txt$

    outputs:
      changed-py-files: ${{ steps.changed-py-files.outputs.any_changed }}
      changed-js-files: ${{ steps.changed-js-files.outputs.any_changed }}
      changed-requirements: ${{ steps.changed-requirements.outputs.any_changed }}

  cmis-init:  # regression check for #972
    runs-on: ubuntu-latest
    needs:
      - changed-files

    # only run tests if source files have changed (e.g. skip for PRs that only update docs)
    if: ${{ needs.changed-files.outputs.changed-py-files == 'true'|| needs.changed-files.outputs.changed-requirements == 'true'|| github.event_name == 'push' }}

    name: Check 'install' with CMIS enabled

    services:
      postgres:
        image: postgis/postgis:12-2.5
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install system packages
        run: |
          sudo apt-get update \
          && sudo apt-get install -y --no-install-recommends \
            libgdal-dev \
            gdal-bin

      - name: Install dependencies
        run: pip install -r requirements/ci.txt

      - name: Test migrate and check
        run: |
          createdb -U postgres -h localhost openzaak
          python src/manage.py check
          python src/manage.py migrate
        env:
          CMIS_ENABLED: True
          DB_NAME: openzaak

  tests:
    runs-on: ubuntu-latest
    needs:
      - changed-files

    # only run tests if source files have changed (e.g. skip for PRs that only update docs)
    if: ${{ needs.changed-files.outputs.changed-py-files == 'true'|| needs.changed-files.outputs.changed-requirements == 'true'|| github.event_name == 'push' }}

    strategy:
      matrix:
        postgres: ['12', '13', '14']
        postgis: ['2.5', '3.2']
        binding: ['BROWSER', 'WEBSERVICE']
        cmisurlmapping: ['False', 'True']
        exclude:
          # postgis 2.5 is not compatible with recent postgres versions
          - postgres: '13'
            postgis: '2.5'
          - postgres: '14'
            postgis: '2.5'
          # Browser binding + cmisurlmapping is not supported
          - binding: 'BROWSER'
            cmisurlmapping: 'True'
          # do not run tests for all CMIS bindings on all database versions (we only run on postgres 12)
          - binding: 'WEBSERVICE'
            postgres: '13'
          - binding: 'WEBSERVICE'
            postgres: '14'


    name: Tests (PG ${{ matrix.postgres }}, postgis ${{ matrix.postgis }}, ${{ matrix.binding }} binding, CMIS URL mapping = ${{ matrix.cmisurlmapping }} )

    services:
      postgres:
        image: postgis/postgis:${{ matrix.postgres }}-${{ matrix.postgis }}
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install system packages
        run: |
          sudo apt-get update \
          && sudo apt-get install -y --no-install-recommends \
            libgdal-dev \
            gdal-bin

      - name: Bring up Alfresco
        run: |
          docker compose -f docker-compose.ci.cmis.yml up -d
          docker ps -q | xargs  docker stats --no-stream

      - name: Install dependencies
        run: pip install -r requirements/ci.txt

      - name: Build frontend
        run: |
          npm ci --legacy-peer-deps
          npm run build --production

      - name: Run tests
        if: ${{ !(matrix.cmisurlmapping == 'True' && matrix.binding == 'BROWSER') }}
        run: |
          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test src
        env:
          CMIS_BINDING: ${{ matrix.binding }}
          CMIS_URL_MAPPING_ENABLED: ${{ matrix.cmisurlmapping }}

      - name: Publish coverage report
        uses: codecov/codecov-action@v3

  docs:
    runs-on: ubuntu-latest
    name: Documentation build

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'
      - name: Install dependencies
        run: pip install -r requirements/dev.txt pytest
      - name: Install system packages
        run: |
          sudo apt-get update \
          && sudo apt-get install -y --no-install-recommends \
            libgdal-dev \
            gdal-bin
      - name: Generate environment variable documentation using OAf and check if it was updated
        run: |
          bin/generate_envvar_docs.sh
          changes=$(git diff docs/installation/config/env_config.rst)
          if [ ! -z "$changes" ]; then
              echo $changes
              echo "Please update the environment documentation by running \`bin/generate_envvar_docs.sh\`"
              cat docs/installation/config/env_config.rst
              exit 1
          fi
        env:
          DJANGO_SETTINGS_MODULE: openzaak.conf.ci
      - name: Build and test docs
        run: |
          export OPENSSL_CONF=$(pwd)/openssl.conf
          pytest check_sphinx.py -v --tb=auto
        working-directory: docs

  check_requirements:
    runs-on: ubuntu-latest
    name: Check requirements files
    if: ${{ ! startsWith(github.ref, 'refs/tags/') }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - id: files
        uses: tj-actions/changed-files@v8.5
        with:
          files: ^requirements/.+\.txt$

      - name: Check requirements
        run: bin/check_requirements.sh "${{ steps.files.outputs.modified_files }}"

  docker:
    runs-on: ubuntu-latest
    name: Docker image build

    steps:
      - uses: actions/checkout@v4
      - name: Determine tag/commit hash
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "git_hash=${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: Build the Docker image
        run: |
          docker build \
            --tag $IMAGE_NAME:${{ steps.vars.outputs.tag }} \
            --build-arg COMMIT_HASH=${{ steps.vars.outputs.git_hash }} \
            --build-arg RELEASE=${{ steps.vars.outputs.tag }} \
            .
      - run: docker image save -o image.tar $IMAGE_NAME:${{ steps.vars.outputs.tag }}
      - name: Store image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

  publish:
    needs:
      - tests
      - docker

    name: Push Docker image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.repository_owner == 'open-zaak'  # exclude PRs/forks

    steps:
      - uses: actions/checkout@v4
      - name: Download built image
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Determine tag/commit hash
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Load image
        run: |
          docker image load -i image.tar

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image
        run: docker push $IMAGE_NAME:${{ steps.vars.outputs.tag }}
