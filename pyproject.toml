[project]
requires-python = "== 3.12"

# Bumpversion configuration

[tool.bumpversion]
commit = false
tag = false
current_version = "1.21.2"
pre_commit_hooks = [
    "npm i",  # ensure that package-lock.json is updated
]

parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(\\.dev(?P<dev>\\d+))?"
serialize = [
    "{major}.{minor}.{patch}.dev{dev}",
    "{major}.{minor}.{patch}",
]

[tool.bumpversion.parts.dev]

[[tool.bumpversion.files]]
filename = "README.rst"

[[tool.bumpversion.files]]
filename = "README.en.md"

[[tool.bumpversion.files]]
filename = "package.json"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(?:-(?P<dev>\\d+)-alpha)?"
serialize = [
    "{major}.{minor}.{patch}-{dev}-alpha",
    "{major}.{minor}.{patch}",
]

search = '"version": "{current_version}"'
replace = '"version": "{new_version}"'

[[tool.bumpversion.files]]
filename = "deployment/kubernetes/apps.yml"
search = "openzaak_version: '{current_version}'"
replace = "openzaak_version: '{new_version}'"

[[tool.bumpversion.files]]
filename = "deployment/single-server/open-zaak.yml"
search = "openzaak_version: '{current_version}'"
replace = "openzaak_version: '{new_version}'"

[[tool.bumpversion.files]]
filename = "src/openzaak/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "publiccode.yaml"
search = "softwareVersion: {current_version}"
replace = "softwareVersion: {new_version}"

[[tool.bumpversion.files]]
filename = "publiccode.yaml"
search = "releaseDate: '\\d{{4}}-\\d{{2}}-\\d{{2}}'"
replace = "releaseDate: '{now:%Y-%m-%d}'"
regex = true


# Ruff configuration
[tool.ruff]
# Exclude folders and files
exclude = [
    "migrations",
    "static",
    "media",
]

# Same as Black
line-length = 88
indent-width = 4

target-version = "py312"

[tool.ruff.lint]
select = [
    # https://docs.astral.sh/ruff/rules/#isort-i
    "I",
    # https://docs.astral.sh/ruff/rules/#error-e
    "E",
    # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "F",
    # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SIM",
    # https://docs.astral.sh/ruff/rules/#perflint-perf
    "PERF",
    # https://docs.astral.sh/ruff/rules/#refurb-furb
    "FURB",
    # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "B006",
    "B010",
    # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "N",
    "TID251",# tidy-imports
    "TID253",
]

ignore = [
    # Checks for assertRaises and pytest.raises context managers that catch Exception or BaseException.
    "B017",
    # Checks for useless expressions.
    "B018",
    # Checks for raise statements in exception handlers that lack a from clause.
    "B904",
    # Whitespace before ':' (conflicts with Black)
    "E203",
    # Checks for lines that exceed the specified maximum character length.
    "E501",
    # Do not assign a lambda expression
    "E731",
    # Name may be undefined from '*' import
    "F405",
    # Checks for CamelCase imports that are aliased to lowercase names
    "N813",
    # Checks for CamelCase imports that are aliased to constant-style names.
    "N814",
    # Checks for class variable names that follow the mixedCase convention
    "N815",
    # Exception name should be named with Error suffix
    "N818",
    # Checks for instance methods that use a name other than self for their first argument.
    "N805",
    # Checks for the use of non-lowercase variable names in functions
    "N806",
    # Checks for functions names that do not follow the snake_case naming convention.
    "N802",
    # Checks for module names that do not follow the snake_case naming convention or are otherwise invalid.
    "N999",
    # Checks for for loops that can be replaced by a list comprehension.
    "PERF401",
    # Checks for `if` statements that can be replaced with bool
    "SIM103",
    # Check for if-else-blocks that can be replaced with a ternary operator
    "SIM108",
    #Check for environment variables that are not capitalized.
    "SIM112",
    # Checks for nested if statements that can be collapsed into a single if statement
    "SIM102",
    # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "SIM117",
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = false
known-first-party = ["openzaak"]
lines-after-imports = -1
relative-imports-order = "furthest-to-closest"
sections = { django = ["django"] }
section-order = [
    "future",
    "standard-library",
    "django",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.flake8-tidy-imports.banned-api.logging]
msg = "Use `structlog.stdlib.get_logger(__name__)` instead."

[tool.ruff.format]
line-ending = "lf"