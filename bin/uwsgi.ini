; Docs:
; * https://uwsgi-docs.readthedocs.io/en/latest/Logging.html
; * https://uwsgi-docs.readthedocs.io/en/latest/LogEncoders.html
; Reference article: https://blog.rama.io/json-logging-with-uwsgi
[uwsgi]
; logger definition for the django app logs, which are already structured
logger = djangologger stdio
; logger definition for the uwsgi server logs
logger = uwsgilogger stdio

; any message starting with { is assumed to already be structured ->
; send it to the djangologger
log-route = djangologger ^{.*$
; send any message not starting with { to the uwsgilogger
log-route = uwsgilogger ^((?!\{).)*$

; leave already JSON formatted django logs as is
log-encoder = format:djangologger ${msg}
; Encode uWSGI server logs as JSON
log-encoder = json:uwsgilogger {"source": "uwsgi", "type": "server", "timestamp": "${strftime:%%Y-%%m-%%dT%%H:%%M:%%S%%z}", "event": "${msg}", "level": "info"}

; these are uwsgi's own request logs (not to be confused with the request logs emitted
; by the application!)
logger-req = stdio
; pragamatic approach - these variables are *not* JSON escaped and can lead to broken
; output lines. there's no security risk involved there, at worst a log scraper fails to
; parse the message as json
; TODO: perhaps we can extract trace IDs here for spans -> using uwsgi vars!
log-format = {"source": "uwsgi", "event": "request", "method": "%(method)", "path": "%(uri)", "duration_in_ms": %(msecs), "status": %(status), "bytes": %(rsize), "referer": "%(referer)", "host": "%(host)", "timestamp": "%(iso8601timestamp)", "remote_ip": "%(addr)", "level": "info"}

; finally, ensure that all log lines are separated with a newline
log-encoder = nl