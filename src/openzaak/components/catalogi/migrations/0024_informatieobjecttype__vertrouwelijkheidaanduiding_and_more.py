# SPDX-License-Identifier: EUPL-1.2
# Copyright (C) 2025 Dimpact
# Generated by Django 5.1.7 on 2025-04-15 07:29

import vng_api_common.fields
from django.db import migrations
from vng_api_common.constants import VA_MAPPING, REVERSE_VA_MAPPING


def populate_zaaktype_vertrouwelijkheidaanduiding_integer_field(apps, schema_editor):
    ZaakType = apps.get_model("catalogi", "ZaakType")
    BATCH_SIZE = 2000
    batch = []
    for instance in ZaakType.objects.iterator():
        if not (max_va := VA_MAPPING.get(instance.vertrouwelijkheidaanduiding)):
            continue

        instance._vertrouwelijkheidaanduiding = max_va
        batch.append(instance)

        if len(batch) >= BATCH_SIZE:
            ZaakType.objects.bulk_update(batch, ["_vertrouwelijkheidaanduiding"])
            batch.clear()

    # Handle final batch
    if batch:
        ZaakType.objects.bulk_update(batch, ["_vertrouwelijkheidaanduiding"])


def populate_zaaktype_vertrouwelijkheidaanduiding_char_field(apps, schema_editor):
    ZaakType = apps.get_model("catalogi", "ZaakType")
    BATCH_SIZE = 2000
    batch = []
    for instance in ZaakType.objects.filter(vertrouwelijkheidaanduiding="").iterator():
        if not (
            max_va := REVERSE_VA_MAPPING.get(instance._vertrouwelijkheidaanduiding)
        ):
            continue

        instance.vertrouwelijkheidaanduiding = max_va
        batch.append(instance)

        if len(batch) >= BATCH_SIZE:
            ZaakType.objects.bulk_update(batch, ["vertrouwelijkheidaanduiding"])
            batch.clear()

    # Handle final batch
    if batch:
        ZaakType.objects.bulk_update(batch, ["vertrouwelijkheidaanduiding"])


def populate_iotype_vertrouwelijkheidaanduiding_integer_field(apps, schema_editor):
    InformatieObjectType = apps.get_model("catalogi", "InformatieObjectType")
    BATCH_SIZE = 2000
    batch = []
    for instance in InformatieObjectType.objects.iterator():
        if not (max_va := VA_MAPPING.get(instance.vertrouwelijkheidaanduiding)):
            continue

        instance._vertrouwelijkheidaanduiding = max_va
        batch.append(instance)

        if len(batch) >= BATCH_SIZE:
            InformatieObjectType.objects.bulk_update(
                batch, ["_vertrouwelijkheidaanduiding"]
            )
            batch.clear()

    # Handle final batch
    if batch:
        InformatieObjectType.objects.bulk_update(
            batch, ["_vertrouwelijkheidaanduiding"]
        )


def populate_iotype_vertrouwelijkheidaanduiding_char_field(apps, schema_editor):
    InformatieObjectType = apps.get_model("catalogi", "InformatieObjectType")
    BATCH_SIZE = 2000
    batch = []
    for instance in InformatieObjectType.objects.filter(
        vertrouwelijkheidaanduiding=""
    ).iterator():
        if not (
            max_va := REVERSE_VA_MAPPING.get(instance._vertrouwelijkheidaanduiding)
        ):
            continue

        instance.vertrouwelijkheidaanduiding = max_va
        batch.append(instance)

        if len(batch) >= BATCH_SIZE:
            InformatieObjectType.objects.bulk_update(
                batch, ["vertrouwelijkheidaanduiding"]
            )
            batch.clear()

    # Handle final batch
    if batch:
        InformatieObjectType.objects.bulk_update(batch, ["vertrouwelijkheidaanduiding"])


class Migration(migrations.Migration):

    dependencies = [
        (
            "catalogi",
            "0023_alter_resultaattype_brondatum_archiefprocedure_datumkenmerk",
        ),
    ]

    operations = [
        migrations.AddField(
            model_name="informatieobjecttype",
            name="_vertrouwelijkheidaanduiding",
            field=vng_api_common.fields.VertrouwelijkheidsAanduidingFieldInt(
                blank=True,
                choices=[
                    (10, "Openbaar"),
                    (20, "Beperkt openbaar"),
                    (30, "Intern"),
                    (40, "Zaakvertrouwelijk"),
                    (50, "Vertrouwelijk"),
                    (60, "Confidentieel"),
                    (70, "Geheim"),
                    (80, "Zeer geheim"),
                ],
                db_index=True,
                help_text="Aanduiding van de mate waarin zaakdossiers van ZAAKen van dit ZAAKTYPE voor de openbaarheid bestemd zijn. Indien de zaak bij het aanmaken geen vertrouwelijkheidaanduiding krijgt, dan wordt deze waarde gezet.",
                null=True,
                verbose_name="vertrouwelijkheidaanduiding",
            ),
        ),
        migrations.AddField(
            model_name="zaaktype",
            name="_vertrouwelijkheidaanduiding",
            field=vng_api_common.fields.VertrouwelijkheidsAanduidingFieldInt(
                blank=True,
                choices=[
                    (10, "Openbaar"),
                    (20, "Beperkt openbaar"),
                    (30, "Intern"),
                    (40, "Zaakvertrouwelijk"),
                    (50, "Vertrouwelijk"),
                    (60, "Confidentieel"),
                    (70, "Geheim"),
                    (80, "Zeer geheim"),
                ],
                db_index=True,
                help_text="Aanduiding van de mate waarin zaakdossiers van ZAAKen van dit ZAAKTYPE voor de openbaarheid bestemd zijn. Indien de zaak bij het aanmaken geen vertrouwelijkheidaanduiding krijgt, dan wordt deze waarde gezet.",
                null=True,
                verbose_name="vertrouwelijkheidaanduiding",
            ),
        ),
        migrations.RunPython(
            populate_zaaktype_vertrouwelijkheidaanduiding_integer_field,
            populate_zaaktype_vertrouwelijkheidaanduiding_char_field,
        ),
        migrations.RunPython(
            populate_iotype_vertrouwelijkheidaanduiding_integer_field,
            populate_iotype_vertrouwelijkheidaanduiding_char_field,
        ),
    ]
